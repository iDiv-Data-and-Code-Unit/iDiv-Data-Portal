@using System.Collections.Generic;
@using System.Data;
@*@using BExIS.Ddm.Model;*@
@using FluentBootstrap;
@using BExIS.Web.Shell.Models;

@model BExIS.Web.Shell.Models.UiTestModel
@{
    ViewBag.Title = "title";

    #region client data

    List<string> testList = new List<string>();
    testList.Add("David Blaa");
    testList.Add("Martin Hohmuth");
    testList.Add("Sven Thiel");
    testList.Add("12345678901234567890");

    DataTable table = new DataTable();
    table.Columns.Add("Weight", typeof(int));
    table.Columns.Add("Name", typeof(string));
    table.Columns.Add("Breed", typeof(string));
    table.Columns.Add("Date", typeof(DateTime));

    // Here we add five DataRows.
    table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now);
    table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now); table.Rows.Add(57, "Koko", "Shar Pei", DateTime.Now);
    table.Rows.Add(130, "Fido", "Bullmastiff", DateTime.Now);
    table.Rows.Add(92, "Alex", "Anatolian Shepherd Dog", DateTime.Now);
    table.Rows.Add(25, "Charles", "Cavalier King Charles Spaniel", DateTime.Now);
    table.Rows.Add(7, "Candy", "Yorkshire Terrier", DateTime.Now);

    #region facets

    //facets

    //List<Facet> facets = new List<Facet>();

    ////Facet 1
    //Facet f1 = new Facet();
    //f1.DisplayName = "f1";
    //f1.Name = "f1";
    //f1.Text = "text f1";
    //f1.Value = "f1";
    //f1.Childrens = new List<Facet>();
    //f1.Childrens.Add(new Facet()
    //{
    //    DisplayName = "ff1",
    //    Name = "ff1",
    //    Value = "ff1",
    //    Parent = f1
    //});
    //f1.Childrens.Add(new Facet()
    //{
    //    DisplayName = "ff2",
    //    Name = "ff2",
    //    Value = "ff2",
    //    Parent = f1
    //});

    //Facet f2 = new Facet();
    //f2.DisplayName = "f1";
    //f2.Name = "f1";
    //f2.Value = "f1";
    //f2.Text = "text f2";
    //f2.Childrens = new List<Facet>();
    //f2.Childrens.Add(new Facet()
    //{
    //    DisplayName = "ff21",
    //    Name = "ff21",
    //    Value = "ff21",
    //    Parent = f2
    //});
    //f2.Childrens.Add(new Facet()
    //{
    //    DisplayName = "ff22",
    //    Name = "ff22",
    //    Value = "ff22",
    //    Parent = f2
    //});

    //facets.Add(f1);
    //facets.Add(f2);

    #endregion

    #endregion

    List<string> list = new List<string>();
    list.Add("1");
    list.Add("2");
    list.Add("3");
    list.Add("4");

    List<string> comboboxList = new List<string>();
    comboboxList.Add("Erfurt");
    comboboxList.Add("Jena");
    comboboxList.Add("Weimar");
    comboboxList.Add("New New New New York");
    comboboxList.Add("NewNewNewNewYork");
    comboboxList.Add("12345678901234567890");
}
@*
    Color Overview

    White    #000000   brigth
    Gray 01  #f5f5f5
    Gray 02  #ebebeb
    Gray 03  #afb0b1
    Gray 04  #009cdf   dark // new 323232
    Black    #ffffff
    Yellow   #ffbb52
    Orange   #ff9700
    Red      #f24c24
    Green 01  #388670   dark
    Green 02  #72b1a0
    Green 03  #bee1da
    Green 04  #d2e8e3
    Green 05  #eff7f6   brigth
*@

<h1>Bootstrap Select</h1>

<h3>BEXIS UI COLOR OVERVIEW</h3>
<div>
    <table>
        <tr>
            <th>
                Color
            </th>
            <th>
                Color Code
            </th>
            <th>
                Color Name
            </th>
        </tr>
        <tr><td style="background-color: #ffffff;"></td><td>#ffffff</td><td>White</td></tr>
        <tr><td style="background-color: #f5f5f5;"></td><td>#f5f5f5</td><td>Gray 01</td></tr>
        <tr><td style="background-color: #ebebeb;"></td><td>#ebebeb</td><td>Gray 02</td></tr>
        <tr><td style="background-color: #afb0b1;"></td><td>#afb0b1</td><td>Gray 03</td></tr>
        <tr><td style="background-color: #565655;"></td><td>#565655</td><td>old Gray 04</td></tr>
        <tr><td style="background-color: #323232;"></td><td>#323232</td><td>new Gray 04 (wrong)</td></tr>
        <tr><td style="background-color: #000000;"></td><td>#000000</td><td>Black</td></tr>
        <tr><td style="background-color: #f24c24;"></td><td>#f24c24</td><td>Red</td></tr>
        <tr><td style="background-color: #ff9700;"></td><td>#ff9700</td><td>Orange</td></tr>
        <tr><td style="background-color: #388670;"></td><td>#388670</td><td>Green 01</td></tr>
        <tr><td style="background-color: #72b1a0;"></td><td>#72b1a0</td><td>Green 02</td></tr>
        <tr><td style="background-color: #bee1da;"></td><td>#bee1da</td><td>Green 03</td></tr>
        <tr><td style="background-color: #d2e8e3;"></td><td>#d2e8e3</td><td>Green 04</td></tr>
        <tr><td style="background-color: #eff7f6;"></td><td>#eff7f6</td><td>Green 05</td></tr>
    </table>
</div>

<h3>Dropdown with groups</h3>
<select>
    <optgroup label="Picnic">
        <option>Mustard</option>
        <option>Ketchup</option>
        <option>Relish</option>
    </optgroup>
    <optgroup label="Camping">
        <option>Tent</option>
        <option>Flashlight</option>
        <option>Toilet Paper</option>
    </optgroup>
</select>

<select class="bx-dropdown">
    <optgroup label="Picnic">
        <option>Mustard</option>
        <option>Ketchup</option>
        <option>Relish</option>
    </optgroup>
    <optgroup label="Camping">
        <option>Tent</option>
        <option>Flashlight</option>
        <option>Toilet Paper</option>
    </optgroup>
</select>

<h3>Dropdown 20000 Elements</h3>
@{
    SelectListItem aItem;
    List<SelectListItem> listDD = new List<SelectListItem>();

    for (int i = 0; i < 10; i++)
    {
        aItem = new SelectListItem();
        aItem.Text = i.ToString();
        aItem.Value = i.ToString();
        listDD.Add(aItem);
    }
}
@Html.DropDownList("testDropdown", listDD, "Select")

<h3>REGEX TEST</h3>

<div id="regex">

    @Html.TextArea("RegExValue");
    @Html.TextArea("RegexPattern");
    <div id="RegExResult">
        see console
    </div>
</div>
<script type="text/javascript">

    $("#RegExValue").change(function () {

        var tmpString = $(this).val();

        var exp = $("#RegexPattern").val();

        var result = tmpString.match(exp);

        console.log("input: " + tmpString);
        console.log("regex: " + exp);
        console.log("result: " + result);
        console.log(result);
        console.log(result[1]);

    })
</script>

<h3>TEST Connectors</h3>

<div id="connectorContainer">

    <table>
        <tr>
            <td>

                <div class="source" style="border: 1px solid; height: 30px; width: 50%;">Source</div>
                <div class="source" style="border: 1px solid; height: 30px; width: 50%;">Source</div>
                <div class="source" style="border: 1px solid; height: 30px; width: 50%;">Source</div>
                <div class="source" style="border: 1px solid; height: 30px; width: 50%;">Source</div>
            </td>
            <td>
                <div class="target" style="border: 1px solid; height: 30px; width: 50%">Target</div>
                <div class="target" style="border: 1px solid; height: 30px; width: 50%">Target</div>
                <div class="target" style="border: 1px solid; height: 30px; width: 50%">Target</div>
                <div class="target" style="border: 1px solid; height: 30px; width: 50%">Target</div>
            </td>
        </tr>
    </table>

    <h3>ohne table container</h3>

    <div>

        <div class="source" style="border: 1px solid; height: 30px; width: 50%;">Source</div>
        <div class="source" style="border: 1px solid; height: 30px; width: 50%;">Source</div>
        <div class="source" style="border: 1px solid; height: 30px; width: 50%;">Source</div>
        <div class="source" style="border: 1px solid; height: 30px; width: 50%;">Source</div>
    </div>
    <div style="float: right">
        <div class="target" style="border: 1px solid; height: 30px; width: 50%">Target</div>
        <div class="target" style="border: 1px solid; height: 30px; width: 50%">Target</div>
        <div class="target" style="border: 1px solid; height: 30px; width: 50%">Target</div>
        <div class="target" style="border: 1px solid; height: 30px; width: 50%">Target</div>
    </div>
</div>

<script type="text/javascript">
    jsPlumb.ready(function () {
        console.log("init jsplumb");

        var instance = window.instance = jsPlumb.getInstance({
            // drag options
            //DragOptions: { cursor: "pointer", zIndex: 2000 },
            //// default to a gradient stroke from blue to green.
            //PaintStyle: {
            //    gradient: {
            //        stops: [
            //            [0, "#0d78bc"],
            //            [1, "#558822"]
            //        ]
            //    },
            //    stroke: "#558822",
            //    strokeWidth: 10
            //},
            Container: "connectorContainer"
        });

        // suspend drawing and initialise.
        instance.batch(function () {

            //set source
            // get the list of ".le-mapping-simple-selector-source" elements.
            var simpleSources = jsPlumb.getSelector(".source");
            console.log(simpleSources);
            instance.makeSource(simpleSources,
                {
                    anchor: "Right",
                    endpoint: ["Dot", { radius: 3, cssClass: "green" }]
                });

            //set targets
            // get the list of ".le-mapping-simple-selector-source" elements.
            var simpleTargets = jsPlumb.getSelector(".target");
            console.log(simpleTargets);

            instance.makeTarget(simpleTargets,
                {
                    anchor: "Left",
                    endpoint: ["Dot", { radius: 1, cssClass: "green" }]
                });

        });
        jsPlumb.fire("jsPlumbDemoLoaded", instance);
    })
</script>

<h3>TEST EntitySelectorView</h3>

<div>
    <h1>JQuery AutoSize</h1>

    @Html.TextArea("myTextarea");
</div>

<div>
    @*@Html.Partial("_EnititySelectorView", BexisModelManager.LoadEntitySelectorModel<Facet>(facets, null));*@
</div>

<h3>BEXIS UI HELPER</h3>
<div>

    @using (Html.BeginForm("sendForm", "UiTest"))
    {
        //@Html.BexisUI().TextBox().Name("Name").Value(Model.Name).Icon("bx-info").Render()
    @Html.ValidationMessageFor(m => m.Name)
    <br />

        //  @Html.BexisUI().Slider().Name("slider").Min(0).Max(1000).Value(100).Steps(10).Render();
    <br />
    <text>Tooltip examle. - Hover on the icon</text><br />

    <img src="~/Content/Images/info.png" data-toggle="tooltip" title="Hooray!" />
    <button class="bx-button" type="submit">send</button>
    }

    @*@(Html.BexisUI().List()
        .Data(new SelectList(list))
        .Action("OnSelectTreeViewItem", "Home", new RouteValueDictionary { { "area", "DDM" }},"Id")
        .Render())*@
</div>

<h3>html vs telerik vs bootstrap</h3>
<table>
    <thead></thead>
    <tr>
        <th></th>
        <th>HTML</th>
        <th>Telerik</th>
        <th>Bootstrap</th>
        <th>Fluent Bootstrap</th>
    </tr>
    <tr>
        <td>Dropdown</td>
        <td>@Html.DropDownList("test", new SelectList(testList), new { @class = "bx-dropdown" })</td>
        <td>
            @(Html.Telerik().DropDownList()
                                     .Name("FilterList")
                                     .BindTo(new SelectList(testList))
                                     .ClientEvents(e => e.OnChange("onChange"))
            )
        </td>
        <td>
            <div class="dropdown">
                <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                    Dropdown
                    <span class="bx-delete"></span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                    <li><a href="#">Action</a></li>
                    <li><a href="#">Another action</a></li>
                    <li><a href="#">Something else here</a></li>
                    <li><a href="#">Separated link</a></li>
                </ul>
            </div>
        </td>

        <td>

            @using (var dropdown = Html.Bootstrap().Dropdown("My Dropdown").Begin())
            {
            @dropdown.DropdownLink("Action", "/Action")
            @dropdown.DropdownHeader("Header")
            @dropdown.DropdownLink("Another Action", "/AnotherAction").SetState(TextState.Primary)
            @dropdown.DropdownLink("Disabled Link", "/Disabled").SetDisabled()
            @dropdown.DropdownDivider()
            @dropdown.DropdownLink("Google", "http://www.google.com")
            }
        </td>
    </tr>
    <tr>
        <td>Combobox</td>
        <td></td>
        <td>
            @(Html.Telerik().ComboBox()
                                    .Name("SelectedDatasetId")
                                    .Placeholder("New Dataset")
                                    .Filterable()
                                    .SelectedIndex(0)
                                    .HtmlAttributes(new { @class = "bx-dropdown" })
                                    .BindTo(new SelectList(comboboxList))
            )
        </td>
        <td>
            <select class="comboboxBootstrap">
                <option></option>
                <option value="PA">Pennsylvania</option>
                <option value="CT">Connecticut</option>
                <option value="NY">New York</option>
                <option value="MD">Maryland</option>
                <option value="VA">Virginia</option>
            </select>
        </td>
        <td>...</td>
    </tr>
    <tr>
        <td>TextBox</td>
        <td> @Html.TextBox("test", "", new { @class = "bx-input" })</td>
        <td>
            autocomplete

            @(Html.Telerik().AutoComplete()
                                            .Name("autoComplete")
                                            .Encode(false)

                                            .DataBinding(dataBinding => dataBinding
                                                .Ajax().Select("_AutoCompleteAjaxLoading", "Home")
                                                .Cache(false))

                                            .Filterable(filtering =>
                                            {
                                                filtering.FilterMode(AutoCompleteFilterMode.Contains);
                                                filtering.MinimumChars(3);

                                            })
            )
        </td>
    </tr>
    <tr>
        <td>TextArea</td>
        <td> @Html.TextArea("test", "", new { @class = "bx-textarea" })</td>
        <td></td>
    </tr>
    <tr>
        <td>Checkbox</td>
        <td> @Html.CheckBox("halligalli")</td>
        <td></td>
    </tr>
    <tr>
        <td>RadioButton</td>
        <td> @Html.RadioButton("hallo", true) yes</td>
        <td></td>
    </tr>
</table>

<div style="padding: 10px; width:800px;">

    <table>
        <tr>
            <th>.bx-list</th>
            <th>.bx-list-multi</th>
        </tr>
        <tr>
            <td>
                <ul class="bx-list">
                    <li>
                        Auto (in use)
                    </li>
                    <li>
                        List of Names (in use)
                    </li>
                    <li>
                        MD sample datastructure
                    </li>
                    <li>
                        MD sample datastructure1
                    </li>
                </ul>
            </td>
            <td>
                <ul class="bx-list-multi">
                    <li>
                        Auto (in use)
                    </li>
                    <li>
                        List of Names (in use)
                    </li>
                    <li>
                        MD sample datastructure
                    </li>
                    <li>
                        MD sample datastructure1
                    </li>
                </ul>
            </td>
        </tr>
        <tr>
            <td>
                <ol class="bx-list">
                    <li>
                        Auto (in use)
                    </li>
                    <li>
                        List of Names (in use)
                    </li>
                    <li>
                        MD sample datastructure
                    </li>
                    <li>
                        MD sample datastructure1
                    </li>
                </ol>
            </td>
            <td>
                <ol class="bx-list-multi">
                    <li>
                        Auto (in use)
                    </li>
                    <li>
                        List of Names (in use)
                    </li>
                    <li>
                        MD sample datastructure
                    </li>
                    <li>
                        MD sample datastructure1
                    </li>
                </ol>
            </td>
        </tr>
    </table>
</div>

<br />

<div>
    <p>click for the window</p>
    <button class="bx-button smaller" onclick="onSelect(this)">smallest</button>
    <button class="bx-button smaller" onclick="openJqueryUIDialog()">jquery dialog</button>
    <button class="bx-button small" onclick="onSelect(this)">more</button>
    <button class="bx-button" onclick="openAlertDialog()">alert</button>
    <button class="bx-button" onclick="openMessageDialog()">message</button>
</div>

<div id="alertDialog" title="Error ...." style="display:none">
    <p>
        Currently using <b>36% of your storage space</b>.
    </p>
</div>

<div id="messageDialog" title="Download complete" style="display:none">
    <p>
        Currently using <b>36% of your storage space</b>.
    </p>
</div>

@(Html.Telerik().Window()
            .Name("MoreWindow")
            .Visible(false)
            .Title("More")
            .HtmlAttributes(new { @class = "bx-window" })
            .Modal(false)
            .Draggable(true)
            .Buttons(buttons => buttons.Close())
            .Content(@<text>
                    <div class="bx-title"><h2>html vs telerik vs bootstrap</h2></div>
                    <div class="bx-content">
                        <div>
                            asdkhahsdöfjh  ahsdk jfhkjsdhkhkajdhk ddh chnyxkjh fhwsa jdkach yjh fuidy disjykdh c myxbkjxdh asuie ui<br />
                            sdghjhbxjnb< jb usjh daiu soasdi niasjhdf kjyh xjigh yiusdgh iaug kjb kxyjhx isueg ajsg isds
                        </div>
                        <div>
                            @(Html.Telerik().Grid(table)
                                                      .Name("TestGrid")
                                                      .Groupable()
                                                      .Pageable(pageable => pageable.Position(GridPagerPosition.Both))
                                                      .Filterable()
                                                      .Sortable()
                                                       .Pageable(paging =>
                                                            paging.PageSize(50, new int[] { 1, 2, 3, 10, 50 })
                                                                .Total(table.Rows.Count)
                                                                )
                            )
                        </div>
                    </div>
                    <div class="bx-footer right">
                        <button class="bx-button action" onclick="onSelect(this)">more</button>
                        <button class="bx-button action" onclick="openAlertDialog()">alert</button>
                    </div>
            </text>
)
)

<h3>Telerik UI Components</h3>

<div style="padding: 10px">
    @(Html.Telerik().Upload()
                        .Name("attachments")
                        .Multiple(true)
                        .ShowFileList(true)
    )
</div>

<div style="padding: 10px">
    @(Html.Telerik().TabStrip()
                        .Name("ShowDataTabStrip")
                        .SelectedIndex(0)
                        .Items(tabs =>
                        {

                            tabs.Add()
                                .Text("Meta Data")
                                .Content("Did you know two cherry pits contain enough cyanide to kill you? And that drinking six liters of water is enough to induce a coma and even death?" +
            "And although it is essentially impossible to die from marijuana, you can die from listening to your music too loud. Check out this video by AsapScience explaining just how much will kill you." +
            "*Edit - the video states the 'Death Zone' at high altitudes begins at 8,000ft. This is incorrect - the Death Zone is known to begin at 24,000ft, or 7,300m.");

                            tabs.Add()
                                .Text("Data Structure")
                                .Content("56789");

                            tabs.Add()
                                .Text("Primary Data")
                                .Content("10101010101");
                        })
    )
</div>

@*<div style="padding: 10px">
        @(Html.Telerik().TreeView()
       .Name("TreeView")
       .ShowCheckBox(true)
       .ExpandAll(true)

                       .BindTo<Facet>(@facets, (item, facet) =>
                       {

                           item.Text = facet.DisplayName + " (" + facet.Count + ")";
                           item.Value = facet.Name;
                           item.Enabled = true;
                           item.Checkable = false;
                           item.Checked = false;
                           item.Expanded = true;
                           item.LinkHtmlAttributes["class"] = "t-headeritem";
                           item.LinkHtmlAttributes["title"] = facet.Text + " (" + facet.Count + ")";

                           var l = from f in facet.Childrens
                                   orderby f.Count descending, f.Name
                                   select f;

                           foreach (Facet t in l)// @facet.Childrens)
                           {
                               t.Parent = facet;
                               bool IsSelected = false;

                               TreeViewItem subitem = new TreeViewItem();
                               item.Items.Add(subitem);

                               subitem.Text = t.Name + " (" + t.Count + ")";
                               //subitem.Text = t.Text;

                               //subitem.Parent = item;
                               subitem.Value = t.Name;
                               subitem.Enabled = true;//t.Enabled;
                               //subitem.Checked = IsSelected;
                               //subitem.Selected = IsSelected;
                               subitem.LinkHtmlAttributes["class"] = "t-item-child";

                           }

                           //Get Count from Facets
                           int count = 5;

                           if (item.Items.Count < count && count > 0)
                           {
                               TreeViewItem moreBt = new TreeViewItem();

                               moreBt.Text = "more";
                               moreBt.Value = "more";
                               moreBt.Enabled = true;
                               moreBt.Selected = false;
                               moreBt.Checkable = false;
                               moreBt.LinkHtmlAttributes["title"] = "more";
                               moreBt.LinkHtmlAttributes["class"] = "t-item-more";

                               if (!item.Items.Contains(moreBt))
                                   item.Items
                                       .Add(moreBt);

                           }
                       }
          ))
    </div>*@

<b>telerik table</b>
<div style="padding: 10px">
    @(Html.Telerik().Grid(table)
                      .Name("TestGrid")
                      .Groupable()
                      .Pageable()
                      .Filterable()
                      .Sortable()
                       .Pageable(paging =>
                            paging.PageSize(50, new int[] { 1, 2, 3, 10, 50 })
                                .Total(table.Rows.Count)
                                )

    )
</div>

<b>table</b>
<div style="padding: 10px">
    <table>
        <tr class="header">

            <th>Functions</th>
            @foreach (DataColumn c in table.Columns)
            {
            <th>@c.ColumnName</th>
            }
        </tr>
        @foreach (DataRow r in table.Rows)
        {
        <tr>
            <td>
                <button class="bx-grid-function bx-edit"></button>
                <button class="bx-grid-function bx-trash"></button>
            </td>
            @foreach (object o in r.ItemArray)
                {
            <td>@o</td>
                }
        </tr>
        }
    </table>
</div>
<b>table</b>
<div style="padding: 10px">
    <table>
        <tr class="header">
            <th>Functions</th>
            @foreach (DataColumn c in table.Columns)
            {
            <th>@c.ColumnName</th>
            }
        </tr>
        @foreach (DataRow r in table.Rows)
        {
        <tr>
            <td>
                <button class="bx-button smaller function">edit</button>
                <button class="bx-button smaller function">delete</button>
            </td>
            @foreach (object o in r.ItemArray)
                {
            <td>@o</td>
                }
        </tr>
        }
    </table>
</div>

@if (Model.DataTable != null && Model.DataTable2 != null)
{
<b>LIST of ENTITIES to Datatable</b>
<div style="padding: 10px">
    <p>DATATABLE 1</p>
    <table>
        <tr class="header">
            @foreach (DataColumn c in Model.DataTable.Columns)
                {
            <th>@c.ColumnName</th>
                }
        </tr>
        @foreach (DataRow r in Model.DataTable.Rows)
            {
        <tr>
            @foreach (object o in r.ItemArray)
                    {
            <td>@o</td>
                    }
        </tr>
            }
    </table>
</div>

<div style="padding: 10px">
    <p>DATATABLE 2</p>
    <table>
        <tr class="header">
            @foreach (DataColumn c in Model.DataTable2.Columns)
                {
            <th>@c.ColumnName</th>
                }
        </tr>
        @foreach (DataRow r in Model.DataTable2.Rows)
            {
        <tr>
            @foreach (object o in r.ItemArray)
                    {
            <td>@o</td>
                    }
        </tr>
            }
    </table>
</div>

<b>datatables.net</b>
<div style="padding: 10px">
    <p>DATATABLE 1</p>
    <table id="datatables-net-example">
        <thead>
            <tr>
                @foreach (DataColumn c in Model.DataTable.Columns)
                    {
                <th>@c.ColumnName</th>
                    }
            </tr>
        </thead>
        <tbody>
            @foreach (DataRow r in Model.DataTable.Rows)
                {
            <tr>
                @foreach (object o in r.ItemArray)
                        {
                <td>@o</td>
                        }
            </tr>
                }
        </tbody>
        <tfoot>
            <tr>
                @foreach (DataColumn c in Model.DataTable.Columns)
                    {
                <th>@c.ColumnName</th>
                    }
            </tr>
        </tfoot>
    </table>
</div>
}
<style>
    .slider-selection {
        background: #BABABA;
    }
</style>

<script type="text/javascript">

    $(document).ready(function () {
        resetAllTelerikIconTitles();
        autosize($('textarea'));

        $("#datatables-net-example").DataTable();

    });

    function onChange(e) {

    }

    function onSelect(e) {
        var detailWindow = $("#MoreWindow").data("tWindow");
        detailWindow.center().open();
    }

    function openAlertDialog() {
        bx_openDialog("#alertDialog", "alert");
    }

    function openJqueryUIDialog() {
        $("#alertDialog").dialog();
    }

    function openMessageDialog() {
        bx_openDialog("#messageDialog", "message");
    }
</script>